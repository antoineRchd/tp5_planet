version: "3.9"
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.1
    hostname: zookeeper
    container_name: tp5_planet-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
    healthcheck:
      test: [ "CMD", "echo", "ruok", "|", "nc", "localhost", "2181" ]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.4.1
    hostname: kafka
    container_name: tp5_planet-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
    healthcheck:
      test: [ "CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092" ]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka-topics:
    build:
      context: ./backend
    container_name: tp5_planet-kafka-topics
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_BROKER: kafka:29092
    command: python create_topics.py
    restart: "no"

  flask:
    build:
      context: ./backend
    container_name: tp5_planet-flask
    depends_on:
      kafka:
        condition: service_healthy
      kafka-topics:
        condition: service_completed_successfully
    environment:
      KAFKA_BROKER: kafka:29092
      FLASK_ENV: development
    ports:
      - "5001:5000"
    volumes:
      - ./planets_dataset.csv:/app/planets_dataset.csv
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:5000/" ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # HDFS Services
  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: tp5_planet-namenode
    restart: always
    ports:
      - "9870:9870"
      - "9001:9000"
    volumes:
      - hadoop_namenode:/hadoop/dfs/name
    environment:
      - CLUSTER_NAME=test
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
    env_file:
      - ./hadoop.env

  datanode:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: tp5_planet-datanode
    restart: always
    volumes:
      - hadoop_datanode:/hadoop/dfs/data
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
      CORE_CONF_fs_defaultFS: hdfs://namenode:9000
    ports:
      - "9864:9864"
    env_file:
      - ./hadoop.env

  # Hive Services
  hive-server:
    image: bde2020/hive:2.3.2-postgresql-metastore
    container_name: tp5_planet-hive-server
    env_file:
      - ./hadoop.env
    environment:
      HIVE_CORE_CONF_javax_jdo_option_ConnectionURL: "jdbc:postgresql://hive-metastore/metastore"
      SERVICE_PRECONDITION: "hive-metastore:9083"
    ports:
      - "10000:10000"

  hive-metastore:
    image: bde2020/hive:2.3.2-postgresql-metastore
    container_name: tp5_planet-hive-metastore
    env_file:
      - ./hadoop.env
    command: /opt/hive/bin/hive --service metastore
    environment:
      SERVICE_PRECONDITION: "namenode:9870 datanode:9864 hive-metastore-postgresql:5432"
    ports:
      - "9083:9083"

  hive-metastore-postgresql:
    image: bde2020/hive-metastore-postgresql:2.3.0
    container_name: tp5_planet-hive-metastore-postgresql

  # Spark Services
  spark-master:
    image: bde2020/spark-master:3.3.0-hadoop3.3
    container_name: tp5_planet-spark-master
    ports:
      - "8080:8080"
      - "7077:7077"
    environment:
      - INIT_DAEMON_STEP=setup_spark
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
    env_file:
      - ./hadoop.env

  spark-worker-1:
    image: bde2020/spark-worker:3.3.0-hadoop3.3
    container_name: tp5_planet-spark-worker-1
    depends_on:
      - spark-master
    ports:
      - "8081:8081"
    environment:
      - "SPARK_MASTER=spark://spark-master:7077"
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
    env_file:
      - ./hadoop.env

  spark-worker-2:
    image: bde2020/spark-worker:3.3.0-hadoop3.3
    container_name: tp5_planet-spark-worker-2
    depends_on:
      - spark-master
    ports:
      - "8082:8081"
    environment:
      - "SPARK_MASTER=spark://spark-master:7077"
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
    env_file:
      - ./hadoop.env

  # Spark Application pour le traitement des donn√©es
  spark-app:
    build:
      context: ./spark
    container_name: tp5_planet-spark-app
    depends_on:
      - spark-master
      - kafka
      - namenode
      - datanode
    environment:
      - SPARK_MASTER_URL=spark://spark-master:7077
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - HDFS_NAMENODE=hdfs://namenode:9000
      - HIVE_METASTORE=thrift://hive-metastore:9083
    volumes:
      - ./spark:/app
      - ./planets_dataset.csv:/app/planets_dataset.csv
    env_file:
      - ./hadoop.env
    command: tail -f /dev/null

volumes:
  hadoop_namenode:
  hadoop_datanode:
