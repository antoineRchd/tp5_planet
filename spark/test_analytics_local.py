#!/usr/bin/env python3
"""
Script de d√©monstration des analyses avanc√©es - Version locale
Peut √™tre ex√©cut√© sans Spark pour d√©montrer les concepts avec la nouvelle structure CSV
"""

import pandas as pd
import numpy as np
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report
import json
from datetime import datetime


def create_sample_dataset():
    """
    Cr√©e un dataset d'exemple de plan√®tes avec la nouvelle structure CSV
    """
    data = [
        # Plan√®tes colonisables/habitables
        {
            "Name": "Kepler-442b",
            "Num_Moons": 2,
            "Minerals": 65,
            "Gravity": 0.85,
            "Sunlight_Hours": 8.2,
            "Temperature": -15.5,
            "Rotation_Time": 112.3,
            "Water_Presence": 0,
            "Colonisable": 1,
        },
        {
            "Name": "TRAPPIST-1e",
            "Num_Moons": 0,
            "Minerals": 58,
            "Gravity": 0.92,
            "Sunlight_Hours": 7.1,
            "Temperature": -22.0,
            "Rotation_Time": 6.1,
            "Water_Presence": 1,
            "Colonisable": 1,
        },
        {
            "Name": "Gliese-667Cc",
            "Num_Moons": 1,
            "Minerals": 71,
            "Gravity": 1.5,
            "Sunlight_Hours": 9.3,
            "Temperature": -3.0,
            "Rotation_Time": 28.1,
            "Water_Presence": 1,
            "Colonisable": 1,
        },
        {
            "Name": "K2-18b",
            "Num_Moons": 2,
            "Minerals": 83,
            "Gravity": 2.3,
            "Sunlight_Hours": 5.9,
            "Temperature": -23.0,
            "Rotation_Time": 33.0,
            "Water_Presence": 1,
            "Colonisable": 1,
        },
        {
            "Name": "Kepler-452b",
            "Num_Moons": 1,
            "Minerals": 78,
            "Gravity": 1.2,
            "Sunlight_Hours": 10.5,
            "Temperature": 5.0,
            "Rotation_Time": 385.0,
            "Water_Presence": 1,
            "Colonisable": 1,
        },
        {
            "Name": "HD-40307g",
            "Num_Moons": 3,
            "Minerals": 82,
            "Gravity": 1.8,
            "Sunlight_Hours": 6.8,
            "Temperature": 15.0,
            "Rotation_Time": 197.8,
            "Water_Presence": 1,
            "Colonisable": 1,
        },
        {
            "Name": "Ocean-World-1",
            "Num_Moons": 1,
            "Minerals": 42,
            "Gravity": 1.05,
            "Sunlight_Hours": 9.1,
            "Temperature": 12.0,
            "Rotation_Time": 31.4,
            "Water_Presence": 1,
            "Colonisable": 1,
        },
        # Plan√®tes non colonisables
        {
            "Name": "Venus-like-1",
            "Num_Moons": 0,
            "Minerals": 23,
            "Gravity": 0.9,
            "Sunlight_Hours": 12.1,
            "Temperature": 462.0,
            "Rotation_Time": 243.0,
            "Water_Presence": 0,
            "Colonisable": 0,
        },
        {
            "Name": "Mercury-like-1",
            "Num_Moons": 0,
            "Minerals": 45,
            "Gravity": 0.38,
            "Sunlight_Hours": 14.2,
            "Temperature": 167.0,
            "Rotation_Time": 58.6,
            "Water_Presence": 0,
            "Colonisable": 0,
        },
        {
            "Name": "Mars-like-1",
            "Num_Moons": 2,
            "Minerals": 31,
            "Gravity": 0.38,
            "Sunlight_Hours": 9.8,
            "Temperature": -80.0,
            "Rotation_Time": 24.6,
            "Water_Presence": 0,
            "Colonisable": 0,
        },
        {
            "Name": "Frozen-World-1",
            "Num_Moons": 0,
            "Minerals": 67,
            "Gravity": 0.9,
            "Sunlight_Hours": 5.4,
            "Temperature": -156.0,
            "Rotation_Time": 67.8,
            "Water_Presence": 1,
            "Colonisable": 0,
        },
        {
            "Name": "High-Gravity-1",
            "Num_Moons": 4,
            "Minerals": 88,
            "Gravity": 3.8,
            "Sunlight_Hours": 7.9,
            "Temperature": 18.0,
            "Rotation_Time": 14.2,
            "Water_Presence": 1,
            "Colonisable": 0,
        },
        {
            "Name": "Low-Gravity-1",
            "Num_Moons": 0,
            "Minerals": 55,
            "Gravity": 0.3,
            "Sunlight_Hours": 8.9,
            "Temperature": 8.0,
            "Rotation_Time": 19.7,
            "Water_Presence": 1,
            "Colonisable": 0,
        },
        {
            "Name": "Hot-Jupiter-1",
            "Num_Moons": 12,
            "Minerals": 15,
            "Gravity": 3.2,
            "Sunlight_Hours": 16.5,
            "Temperature": 1200.0,
            "Rotation_Time": 2.1,
            "Water_Presence": 0,
            "Colonisable": 0,
        },
        {
            "Name": "Desert-World-1",
            "Num_Moons": 0,
            "Minerals": 89,
            "Gravity": 0.7,
            "Sunlight_Hours": 13.8,
            "Temperature": 78.0,
            "Rotation_Time": 28.7,
            "Water_Presence": 0,
            "Colonisable": 0,
        },
    ]

    return pd.DataFrame(data)


def calculate_statistics(df):
    """
    Calcule les statistiques de base avec la nouvelle structure
    """
    print("üìä STATISTIQUES DE BASE")
    print("=" * 50)

    print(f"Nombre total de plan√®tes: {len(df)}")
    print(f"Plan√®tes colonisables: {df['Colonisable'].sum()}")
    print(f"Plan√®tes non colonisables: {len(df) - df['Colonisable'].sum()}")

    print("\nüíß Distribution par pr√©sence d'eau:")
    water_dist = df["Water_Presence"].value_counts()
    print(f"  Avec eau: {water_dist.get(1, 0)}")
    print(f"  Sans eau: {water_dist.get(0, 0)}")

    print("\nüåô Distribution par nombre de lunes:")
    moon_dist = df["Num_Moons"].value_counts().sort_index()
    for moons, count in moon_dist.items():
        print(f"  {moons} lune(s): {count}")

    print("\nüìà Statistiques num√©riques:")
    numeric_cols = [
        "Num_Moons",
        "Minerals",
        "Gravity",
        "Sunlight_Hours",
        "Temperature",
        "Rotation_Time",
    ]
    stats = df[numeric_cols].describe()
    print(stats.round(2))

    # Zones d'habitabilit√©
    habitable_temp = df[(df["Temperature"] >= -50) & (df["Temperature"] <= 50)]
    print(
        f"\nüå°Ô∏è Plan√®tes dans zone de temp√©rature habitable (-50¬∞C √† 50¬∞C): {len(habitable_temp)}"
    )

    earth_like_gravity = df[(df["Gravity"] >= 0.8) & (df["Gravity"] <= 1.2)]
    print(
        f"üåç Plan√®tes avec gravit√© proche de la Terre (0.8-1.2g): {len(earth_like_gravity)}"
    )

    return stats


def analyze_correlations(df):
    """
    Analyse les corr√©lations avec la nouvelle structure
    """
    print("\nüîó ANALYSE DES CORR√âLATIONS")
    print("=" * 50)

    numeric_cols = [
        "Num_Moons",
        "Minerals",
        "Gravity",
        "Sunlight_Hours",
        "Temperature",
        "Rotation_Time",
        "Water_Presence",
        "Colonisable",
    ]
    correlation_matrix = df[numeric_cols].corr()

    print("Matrice de corr√©lation:")
    print(correlation_matrix.round(3))

    print("\nüîç Corr√©lations importantes avec la colonisabilit√©:")
    colonisable_corr = correlation_matrix["Colonisable"].sort_values(
        key=abs, ascending=False
    )
    for feature, corr in colonisable_corr.items():
        if feature != "Colonisable" and abs(corr) > 0.2:
            print(f"  {feature}: {corr:.3f}")

    return correlation_matrix


def perform_clustering(df):
    """
    Effectue un clustering des plan√®tes avec la nouvelle structure
    """
    print("\nüéØ CLUSTERING DES PLAN√àTES")
    print("=" * 50)

    # Pr√©paration des donn√©es
    features = ["Minerals", "Gravity", "Sunlight_Hours", "Temperature", "Rotation_Time"]
    X = df[features].values

    # Normalisation
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)

    # K-Means
    n_clusters = 3
    kmeans = KMeans(n_clusters=n_clusters, random_state=42)
    clusters = kmeans.fit_predict(X_scaled)

    df["cluster"] = clusters

    print(f"Clustering en {n_clusters} groupes:")
    for i in range(n_clusters):
        cluster_planets = df[df["cluster"] == i]
        print(f"\nüåå Cluster {i} ({len(cluster_planets)} plan√®tes):")
        print(f"  Plan√®tes: {', '.join(cluster_planets['Name'].tolist())}")

        # Caract√©ristiques moyennes du cluster
        avg_stats = cluster_planets[features].mean()
        print(f"  Caract√©ristiques moyennes:")
        for feature in features:
            print(f"    {feature}: {avg_stats[feature]:.2f}")

        # Colonisabilit√© dans le cluster
        colonisable_count = cluster_planets["Colonisable"].sum()
        print(f"  Plan√®tes colonisables: {colonisable_count}/{len(cluster_planets)}")

    return clusters


def engineer_features(df):
    """
    Cr√©e des features d√©riv√©es pour am√©liorer l'analyse
    """
    print("\nüîß ING√âNIERIE DES FEATURES")
    print("=" * 50)

    df_enhanced = df.copy()

    # Zone de temp√©rature habitable
    df_enhanced["temp_habitable"] = (
        (df_enhanced["Temperature"] >= -50) & (df_enhanced["Temperature"] <= 50)
    ).astype(int)

    # Gravit√© proche de la Terre
    df_enhanced["gravity_earth_like"] = (
        (df_enhanced["Gravity"] >= 0.8) & (df_enhanced["Gravity"] <= 1.2)
    ).astype(int)

    # Ensoleillement optimal
    df_enhanced["optimal_sunlight"] = (
        (df_enhanced["Sunlight_Hours"] >= 8) & (df_enhanced["Sunlight_Hours"] <= 12)
    ).astype(int)

    # Richesse min√©rale
    df_enhanced["mineral_rich"] = (df_enhanced["Minerals"] >= 70).astype(int)

    # Score d'habitabilit√© composite
    df_enhanced["habitability_score"] = (
        df_enhanced["temp_habitable"] * 25
        + df_enhanced["gravity_earth_like"] * 20
        + df_enhanced["Water_Presence"] * 30
        + df_enhanced["optimal_sunlight"] * 15
        + (df_enhanced["Minerals"] / 100.0) * 10
    )

    print("Features cr√©√©es:")
    print("- temp_habitable: Zone de temp√©rature habitable")
    print("- gravity_earth_like: Gravit√© proche de la Terre")
    print("- optimal_sunlight: Ensoleillement optimal")
    print("- mineral_rich: Richesse min√©rale")
    print("- habitability_score: Score composite d'habitabilit√©")

    return df_enhanced


def train_colonisability_model(df):
    """
    Entra√Æne un mod√®le de pr√©diction de colonisabilit√©
    """
    print("\nü§ñ ENTRA√éNEMENT DU MOD√àLE DE COLONISABILIT√â")
    print("=" * 50)

    # Ing√©nierie des features
    df_enhanced = engineer_features(df)

    # Pr√©paration des donn√©es
    feature_columns = [
        "Num_Moons",
        "Minerals",
        "Gravity",
        "Sunlight_Hours",
        "Temperature",
        "Rotation_Time",
        "Water_Presence",
        "temp_habitable",
        "gravity_earth_like",
        "optimal_sunlight",
        "mineral_rich",
        "habitability_score",
    ]

    X = df_enhanced[feature_columns]
    y = df_enhanced["Colonisable"]

    # Division train/test
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.3, random_state=42
    )

    # Entra√Ænement du mod√®le
    model = RandomForestClassifier(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)

    # Pr√©dictions et √©valuation
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)

    print(f"Pr√©cision du mod√®le: {accuracy:.3f}")
    print("\nRapport de classification:")
    print(
        classification_report(
            y_test, y_pred, target_names=["Non colonisable", "Colonisable"]
        )
    )

    # Importance des features
    feature_importance = pd.DataFrame(
        {"feature": feature_columns, "importance": model.feature_importances_}
    ).sort_values("importance", ascending=False)

    print("\nüìä Importance des features:")
    for _, row in feature_importance.head(8).iterrows():
        print(f"  {row['feature']}: {row['importance']:.3f}")

    return model, feature_importance


def detect_anomalies(df):
    """
    D√©tecte les plan√®tes avec des caract√©ristiques atypiques
    """
    print("\nüö® D√âTECTION D'ANOMALIES")
    print("=" * 50)

    anomalies = []
    numeric_cols = [
        "Minerals",
        "Gravity",
        "Sunlight_Hours",
        "Temperature",
        "Rotation_Time",
    ]

    for col in numeric_cols:
        Q1 = df[col].quantile(0.25)
        Q3 = df[col].quantile(0.75)
        IQR = Q3 - Q1

        lower_bound = Q1 - 1.5 * IQR
        upper_bound = Q3 + 1.5 * IQR

        col_anomalies = df[(df[col] < lower_bound) | (df[col] > upper_bound)]

        if len(col_anomalies) > 0:
            print(f"\nüìè Anomalies pour {col}:")
            print(f"  Seuils: [{lower_bound:.2f}, {upper_bound:.2f}]")
            for _, planet in col_anomalies.iterrows():
                print(f"  {planet['Name']}: {planet[col]:.2f}")
                anomalies.append(
                    {
                        "planet": planet["Name"],
                        "feature": col,
                        "value": planet[col],
                        "expected_range": f"[{lower_bound:.2f}, {upper_bound:.2f}]",
                    }
                )

    return anomalies


def calculate_colonization_scores(df):
    """
    Calcule des scores de colonisation personnalis√©s
    """
    print("\nüöÄ CALCUL DES SCORES DE COLONISATION")
    print("=" * 50)

    df_scores = df.copy()

    # Score bas√© sur multiple crit√®res
    df_scores["colonization_score"] = (
        # Temp√©rature id√©ale (entre -20 et 30¬∞C)
        np.where(
            (df_scores["Temperature"] >= -20) & (df_scores["Temperature"] <= 30),
            25,
            np.where(
                (df_scores["Temperature"] >= -50) & (df_scores["Temperature"] <= 50),
                15,
                0,
            ),
        )
        +
        # Gravit√© proche de la Terre (0.8 √† 1.2)
        np.where(
            (df_scores["Gravity"] >= 0.8) & (df_scores["Gravity"] <= 1.2),
            20,
            np.where(
                (df_scores["Gravity"] >= 0.5) & (df_scores["Gravity"] <= 2.0), 10, 0
            ),
        )
        +
        # Pr√©sence d'eau
        df_scores["Water_Presence"] * 30
        +
        # Ressources min√©rales (normalis√© sur 25 points)
        (df_scores["Minerals"] * 25 / 100)
    )

    # Top plan√®tes pour colonisation
    top_planets = df_scores.nlargest(10, "colonization_score")

    print("üèÜ Top 10 des plan√®tes pour la colonisation:")
    for i, (_, planet) in enumerate(top_planets.iterrows(), 1):
        print(
            f"  {i:2d}. {planet['Name']:15s}: {planet['colonization_score']:.1f} points"
        )
        print(
            f"      Temp: {planet['Temperature']:6.1f}¬∞C, Gravit√©: {planet['Gravity']:.2f}g, "
            f"Eau: {'Oui' if planet['Water_Presence'] else 'Non'}, Min√©raux: {planet['Minerals']}"
        )

    return df_scores


def generate_report(df, stats, correlations, model, anomalies):
    """
    G√©n√®re un rapport complet d'analyse
    """
    print("\nüìã G√âN√âRATION DU RAPPORT FINAL")
    print("=" * 50)

    report = {
        "timestamp": datetime.now().isoformat(),
        "dataset_summary": {
            "total_planets": len(df),
            "colonizable_planets": int(df["Colonisable"].sum()),
            "water_bearing_planets": int(df["Water_Presence"].sum()),
            "average_temperature": float(df["Temperature"].mean()),
            "average_gravity": float(df["Gravity"].mean()),
            "average_minerals": float(df["Minerals"].mean()),
        },
        "model_performance": {
            "algorithm": "RandomForest",
            "features_used": [
                "Num_Moons",
                "Minerals",
                "Gravity",
                "Sunlight_Hours",
                "Temperature",
                "Rotation_Time",
                "Water_Presence",
                "temp_habitable",
                "gravity_earth_like",
                "optimal_sunlight",
                "mineral_rich",
                "habitability_score",
            ],
        },
        "anomalies_detected": len(anomalies),
        "key_insights": [
            f"Temperature shows correlation of {correlations.loc['Temperature', 'Colonisable']:.3f} with colonizability",
            f"Water presence shows correlation of {correlations.loc['Water_Presence', 'Colonisable']:.3f} with colonizability",
            f"Gravity shows correlation of {correlations.loc['Gravity', 'Colonisable']:.3f} with colonizability",
            f"{len(df[(df['Temperature'] >= -50) & (df['Temperature'] <= 50)])} planets in habitable temperature zone",
        ],
    }

    # Sauvegarde du rapport
    with open(
        f"/tmp/planet_analysis_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
        "w",
    ) as f:
        json.dump(report, f, indent=2)

    print("‚úÖ Rapport g√©n√©r√© et sauvegard√©")
    print(f"üìä R√©sum√©: {report['dataset_summary']['total_planets']} plan√®tes analys√©es")
    print(
        f"üéØ {report['dataset_summary']['colonizable_planets']} plan√®tes colonisables identifi√©es"
    )
    print(
        f"üíß {report['dataset_summary']['water_bearing_planets']} plan√®tes avec eau d√©tect√©es"
    )
    print(f"üö® {report['anomalies_detected']} anomalies trouv√©es")

    return report


def main():
    """
    Fonction principale de d√©monstration des analyses
    """
    print("üî¨ D√âMONSTRATION DES ANALYSES PLAN√âTAIRES")
    print(
        "Structure CSV: Name, Num_Moons, Minerals, Gravity, Sunlight_Hours, Temperature, Rotation_Time, Water_Presence, Colonisable"
    )
    print("=" * 80)

    try:
        # 1. Cr√©ation/chargement du dataset
        df = create_sample_dataset()
        print(f"üìä Dataset cr√©√© avec {len(df)} plan√®tes d'exemple")

        # 2. Statistiques de base
        stats = calculate_statistics(df)

        # 3. Analyse des corr√©lations
        correlations = analyze_correlations(df)

        # 4. Clustering
        clusters = perform_clustering(df)

        # 5. Calcul des scores de colonisation
        df_with_scores = calculate_colonization_scores(df)

        # 6. Entra√Ænement du mod√®le ML
        model, feature_importance = train_colonisability_model(df)

        # 7. D√©tection d'anomalies
        anomalies = detect_anomalies(df)

        # 8. G√©n√©ration du rapport
        report = generate_report(df_with_scores, stats, correlations, model, anomalies)

        print("\n‚úÖ ANALYSE COMPL√àTE TERMIN√âE")
        print("üéØ Toutes les m√©thodes d'analyse ont √©t√© d√©montr√©es avec succ√®s")
        print("üìÅ Rapport d√©taill√© sauvegard√© dans /tmp/")

    except Exception as e:
        print(f"‚ùå Erreur lors de l'analyse: {e}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":
    main()
