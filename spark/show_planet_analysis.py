#!/usr/bin/env python3
"""
Script pour afficher l'analyse compl√®te d'une plan√®te stock√©e dans HDFS
"""

from pyspark.sql import SparkSession
from pyspark.sql.functions import *
from pyspark.sql.window import Window
import sys
import os


def show_planet_analysis(planet_name):
    print("üîç ANALYSE DE LA PLAN√àTE : {}".format(planet_name))
    print("=" * 60)

    # Configuration Spark
    spark = SparkSession.builder.appName("ShowPlanetAnalysis").getOrCreate()
    spark.sparkContext.setLogLevel("WARN")

    try:
        # 1. Donn√©es brutes de la plan√®te
        print("\nüåç DONN√âES BRUTES")
        print("-" * 30)
        try:
            raw_data = spark.read.parquet(
                "hdfs://namenode:9000/planet_analytics/raw_data/planets_*"
            )
            planet_raw = raw_data.filter(col("Name") == planet_name)

            if planet_raw.count() > 0:
                planet_raw.show(truncate=False)

                # D√©tails de la plan√®te
                planet_info = planet_raw.first()
                print("üìã Caract√©ristiques d√©taill√©es :")
                print("   ‚Ä¢ Nom : {}".format(planet_info["Name"]))
                print("   ‚Ä¢ Lunes : {}".format(planet_info["Num_Moons"]))
                print("   ‚Ä¢ Min√©raux : {} unit√©s".format(planet_info["Minerals"]))
                print("   ‚Ä¢ Gravit√© : {} G".format(planet_info["Gravity"]))
                print(
                    "   ‚Ä¢ Heures de soleil : {} h/jour".format(
                        planet_info["Sunlight_Hours"]
                    )
                )
                print("   ‚Ä¢ Temp√©rature : {} ¬∞C".format(planet_info["Temperature"]))
                print(
                    "   ‚Ä¢ Temps de rotation : {} heures".format(
                        planet_info["Rotation_Time"]
                    )
                )
                print(
                    "   ‚Ä¢ Pr√©sence d'eau : {}".format(
                        "Oui" if planet_info["Water_Presence"] == 1 else "Non"
                    )
                )
                print(
                    "   ‚Ä¢ Colonisable : {}".format(
                        "Oui" if planet_info["Colonisable"] == 1 else "Non"
                    )
                )
            else:
                print(
                    "‚ùå Plan√®te '{}' non trouv√©e dans les donn√©es brutes".format(
                        planet_name
                    )
                )
                return

        except Exception as e:
            print("‚ùå Erreur lecture donn√©es brutes : {}".format(e))
            return

        # 2. Analyse d'habitabilit√©
        print("\nüå± ANALYSE D'HABITABILIT√â")
        print("-" * 30)
        try:
            habitability = spark.read.parquet(
                "hdfs://namenode:9000/planet_analytics/results/habitability_*"
            )
            planet_habitability = habitability.filter(col("Name") == planet_name)

            if planet_habitability.count() > 0:
                hab_info = planet_habitability.first()
                status = hab_info["conditions_habitables"]
                print("üî¨ Statut : {}".format(status))

                if status == "Potentiellement habitable":
                    print("‚úÖ Cette plan√®te remplit les conditions d'habitabilit√© :")
                    print(
                        "   ‚Ä¢ Temp√©rature : {} ¬∞C (plage viable : -50 √† 50¬∞C)".format(
                            hab_info["Temperature"]
                        )
                    )
                    print(
                        "   ‚Ä¢ Gravit√© : {} G (plage viable : 0.5 √† 2.0G)".format(
                            hab_info["Gravity"]
                        )
                    )
                    print(
                        "   ‚Ä¢ Eau pr√©sente : {}".format(
                            "Oui" if hab_info["Water_Presence"] == 1 else "Non"
                        )
                    )
                    print(
                        "   ‚Ä¢ Heures de soleil : {} h (plage viable : 8 √† 16h)".format(
                            hab_info["Sunlight_Hours"]
                        )
                    )
                else:
                    print(
                        "‚ùå Cette plan√®te ne remplit pas toutes les conditions d'habitabilit√©"
                    )
        except Exception as e:
            print("‚ùå Erreur lecture habitabilit√© : {}".format(e))

        # 3. Analyse de colonisation
        print("\nüöÄ ANALYSE DE COLONISATION")
        print("-" * 30)
        try:
            colonisation = spark.read.parquet(
                "hdfs://namenode:9000/planet_analytics/results/colonisation_*"
            )
            planet_colonisation = colonisation.filter(col("Name") == planet_name)

            if planet_colonisation.count() > 0:
                col_info = planet_colonisation.first()
                score = col_info["score_colonisation"]
                potential = col_info["potentiel_colonisation"]

                print("üéØ Score de colonisation : {}/100".format(score))
                print("üìä Potentiel : {}".format(potential))

                # D√©tail du scoring
                print("\nüìà D√©tail du score (sur 100) :")
                temp_score = 20 if 0 <= col_info["Temperature"] <= 40 else 0
                gravity_score = 25 if 0.8 <= col_info["Gravity"] <= 1.2 else 0
                water_score = 30 if col_info["Water_Presence"] == 1 else 0
                sun_score = 15 if 10 <= col_info["Sunlight_Hours"] <= 14 else 0
                mineral_score = 10 if col_info["Minerals"] > 500 else 5

                print(
                    "   ‚Ä¢ Temp√©rature favorable (0-40¬∞C) : {} points".format(temp_score)
                )
                print(
                    "   ‚Ä¢ Gravit√© optimale (0.8-1.2G) : {} points".format(gravity_score)
                )
                print("   ‚Ä¢ Pr√©sence d'eau : {} points".format(water_score))
                print("   ‚Ä¢ Heures de soleil (10-14h) : {} points".format(sun_score))
                print("   ‚Ä¢ Ressources min√©rales : {} points".format(mineral_score))
                print("   ‚Ä¢ TOTAL : {} points".format(score))

                # Recommandation
                if score >= 80:
                    print(
                        "\nüåü RECOMMANDATION : Plan√®te EXCELLENTE pour la colonisation !"
                    )
                elif score >= 60:
                    print("\nüëç RECOMMANDATION : BONNE candidate pour la colonisation")
                elif score >= 40:
                    print("\n‚öñÔ∏è RECOMMANDATION : Colonisation POSSIBLE avec adaptations")
                else:
                    print(
                        "\n‚ö†Ô∏è RECOMMANDATION : Colonisation DIFFICILE, non prioritaire"
                    )

        except Exception as e:
            print("‚ùå Erreur lecture colonisation : {}".format(e))

        # 4. Position dans le classement
        print("\nüèÜ CLASSEMENT")
        print("-" * 30)
        try:
            top10 = spark.read.parquet(
                "hdfs://namenode:9000/planet_analytics/results/top10_colonisation_*"
            )
            # Ajouter un num√©ro de rang
            top10_ranked = top10.orderBy(desc("score_colonisation")).withColumn(
                "rang", row_number().over(Window.orderBy(desc("score_colonisation")))
            )

            planet_rank = top10_ranked.filter(col("Name") == planet_name)
            if planet_rank.count() > 0:
                rank_info = planet_rank.first()
                rank = rank_info["rang"]
                print(
                    "ü•á Position : {}e place sur {} plan√®tes analys√©es".format(
                        rank, top10.count()
                    )
                )

                # Afficher le top 5 pour contexte
                print("\nüìã Top 5 des plan√®tes pour colonisation :")
                top5 = top10_ranked.limit(5)
                for row in top5.collect():
                    marker = "üëâ " if row["Name"] == planet_name else "   "
                    print(
                        "{}{}. {} - Score: {}/100 ({})".format(
                            marker,
                            row["rang"],
                            row["Name"],
                            row["score_colonisation"],
                            row["potentiel_colonisation"],
                        )
                    )
            else:
                print("‚ùå Plan√®te non class√©e dans le top 10")

        except Exception as e:
            print("‚ùå Erreur lecture classement : {}".format(e))

        print("\n‚úÖ ANALYSE TERMIN√âE")

    except Exception as e:
        print("‚ùå Erreur g√©n√©rale: {}".format(e))
        import traceback

        traceback.print_exc()
    finally:
        spark.stop()


def main():
    if len(sys.argv) != 2:
        print("Usage: python show_planet_analysis.py <nom_planete>")
        sys.exit(1)

    planet_name = sys.argv[1]
    show_planet_analysis(planet_name)


if __name__ == "__main__":
    main()
